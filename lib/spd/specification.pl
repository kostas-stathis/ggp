/*
	Prisoners dilemma specification
	author: Kostas Stathis
	created: 7/12/23
	last update: 30/03/24
*/

/* Game independent description */

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F). 
game(S,F):-
        \+ final(S),
        legal(M,S), %once((count(S,C),write(C:M), nl)),
        game(do(M,S),F).

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).


/* Game dependent predicates                 
 -----------------------------------------------
 Representation assumes SC like assertions as logical
 terms. 

 No need to introduce initial states, as we assume that 
 we do not have to play multiple games at once. 

 Effects and results are achieved via unification.
 ------------------------------------------------- 
*/

:- discontiguous initial/1.
:- discontiguous initially/2.
:- discontiguous final/1.
:- discontiguous legal/2.
:- discontiguous possible/2.
:- discontiguous effect/3.
:- discontiguous abnormal/3.
:- discontiguous finally/2.

/* Game specific predicates for the sequential game */

% Payoff matrix for the sequential game
payoffSeq('D', 'D', 1, 1).
payoffSeq('C', 'D', 0, 5).
payoffSeq('D', 'C', 5, 0).
payoffSeq('C', 'C', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.
initially(player(a), s0).
initially(player(b), s0).
initially(role(a, first), s0).
initially(role(b, second), s0).
initially(control(a), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(b, _Mb), do(choice(a, _Ma), S))):- initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P, 'D'), S):- holds(player(P), S).
possible(choice(P, 'C'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player loses control, i.e.
% cannot move anymore. Player B gets control after Player A's move.
abnormal(control(a), choice(a, _M), _S).
effect(control(b), choice(a, _Ma), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(a, Ma, Ua, b, Mb, Ub), S):-
    final(S),
    holds(role(a, first), S),
    holds(did(a, Ma), S),
    holds(role(b, second), S),
    holds(did(b, Mb), S),
    payoffSeq(Ma, Mb, Ua, Ub).

% Goals achieved by the players.
finally(goal(a, Ua), S):-
    finally(outcome(a, _, Ua, _, _, _), S).
finally(goal(b, Ub), S):-
    finally(outcome(_, _, _, b, _, Ub), S).	
