
/*
	Game description framework 
	author: Kostas Stathis
	SWI-Prolog version
	Last update: 12/05/2024
*/

/* Game independent description */

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).  
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).


% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(p1), s0).
initially(player(p2), s0).
initially(control(p1), s0).
initially(control(p2), s0).


% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(S, S):-
	ground(S),
	\+ holds(control(_), S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P,No), S):- holds(player(P), S), in_range(No).
 
in_range(X):- 0=<X, X =<100.

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player looses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(target(P1, M1, T), S):-
	holds(did(P1, M1), S),	
	average(S, Average),
	Pos is (2 / 3) * Average.

average(do(move(P,M), S), InSum, OutSum, InNo, OutNo, FinAcc):-
	IntSum is InSum + M,
	IntNo is InNo + 1, !,
	average(S, IntSum, IntNo, OutSum, FinAcc).
average(S, Sum, Sum, No, No, Average):-
	initial(S),
	Average is Sum / No.
	
% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).


/*
select(P, O, S, M):-
	\+ holds(S, last_move(O, LMo)),
	holds(S, default_move(P, M)).
select(P, O, S, Mo):-
	holds(S, last_move(O, Mo)).
*/

% Best move according to the behaviour of the opponent
% in the last game.
select(P, O, S, M):-
	\+ holds(last_move(O, _), S),
	holds(default_move(P, M),S).
select(P, O, S, M):-
	holds(last_move(O, LMo), S),
	findall(Ui-Mi, (game(S, F), finally(outcome(P, Mi, Ui, O, LMo, Uo), F), Ui >= Uo), Options),
	sort(0, @>, Options, Ranked),
	highest(Ranked, M).

% assumes a ranked list of pairs of the form 'Utility - Move',
% the rank is according to Utility. Returns the first one, and
% any other ones, if they have the same utility. If the list
% is empty, i.e. there is no best move, then it returns 'nil'.
highest([_-M|_], M).
highest([U-_|R], Mi):-
	member(U-Mi, R).
highest([], nil).
	

:- dynamic initially/2.

initialise(Target, State):-
	Target =.. [Pred, Id, _],
	Current =.. [Pred, Id, _],
	(initially(Current, State) -> retract(initially(Current, State)); true),
	assert(initially(Target, State)).
	
% ---- Add here the auxiliary predicates ----
